-- sqlite3
-- stage-polishcastles.sql - Creates a database structure from scraped raw data.
-- Usage: 
-- $ sqlite3 zamki.db3 -init stage-polishcastles.sql

ATTACH DATABASE 'polishcastles.db3' AS landing;

CREATE TABLE IF NOT EXISTS POLISHCASTLES_RATING (
    ID              INTEGER PRIMARY KEY NOT NULL,
    LEVEL           INT NOT NULL,
    RATING          TEXT NOT NULL,
    ICON            TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS POLISHCASTLES_DIFFICULTY (
    ID              INTEGER PRIMARY KEY NOT NULL,
    LEVEL           INTEGER NOT NULL,
    DIFFICULTY      TEXT NOT NULL,
    ACCESS_ICON     TEXT NOT NULL,
    SEARCHING_ICON  TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS POLISHCASTLES_ACCESS (
    ID              INTEGER PRIMARY KEY NOT NULL,
    ACCESS          TEXT NOT NULL,
    ADMISSION       TEXT NOT NULL,
    PARKING         TEXT NOT NULL,
    ADMISSION_ICON  TEXT NOT NULL,
    PARKING_ICON    TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS POLISHCASTLES_PRESERVATION (
    ID              INTEGER PRIMARY KEY NOT NULL,
    PRESERVATION    TEXT NOT NULL,
    ICON            TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS POLISHCASTLES (
    ID                INTEGER PRIMARY KEY,
    NAME              TEXT NOT NULL,
    LINK              TEXT NOT NULL,
    BUILDING          TEXT NOT NULL,
    LATITUDE          REAL NULL,
    LONGITUDE         REAL NULL,
    PRESERVATION_ID   INTEGER NOT NULL,
    ADMISSION_ID      INTEGER NOT NULL,
    PARKING_ID        INTEGER NOT NULL,
    SEARCHING_ID      INTEGER NOT NULL,
    ACCESS_ID         INTEGER NOT NULL,
    RATING_ID         INTEGER NOT NULL,
    PRESERVATION_DESC TEXT,
    ADMISSION_DESC    TEXT,
    PARKING_DESC      TEXT,
    SEARCHING_DESC    TEXT,
    ACCESS_DESC       TEXT,
    RATING_DESC       TEXT
);


CREATE INDEX PRESERVATION_ID    ON POLISHCASTLES (PRESERVATION_ID);
CREATE INDEX ADMISSION_ID       ON POLISHCASTLES (ADMISSION_ID);
CREATE INDEX PARKING_ID         ON POLISHCASTLES (PARKING_ID);
CREATE INDEX SEARCHING_ID       ON POLISHCASTLES (SEARCHING_ID);
CREATE INDEX ACCESS_ID          ON POLISHCASTLES (ACCESS_ID);
CREATE INDEX RATING_ID          ON POLISHCASTLES (RATING_ID);
CREATE INDEX GPS                ON POLISHCASTLES (LATITUDE, LONGITUDE);


CREATE VIEW POLISHCASTLES_BRIEF AS 
select   A.ID
    ,    A.NAME
    ,    A.BUILDING
    ,    A.LATITUDE
    ,    A.LONGITUDE
    ,    B.PRESERVATION
    ,    C.ADMISSION
    ,    D.PARKING
    ,    E.DIFFICULTY   AS SEARCHING
    ,    F.DIFFICULTY   AS ACCESS
    ,    A.RATING_ID
    ,    G.LEVEL        AS STARS
    ,    G.RATING
    ,    A.LINK
from     POLISHCASTLES                 A
join     POLISHCASTLES_PRESERVATION    B ON A.PRESERVATION_ID = B.ID
join     POLISHCASTLES_ACCESS          C ON A.ADMISSION_ID    = C.ID
join     POLISHCASTLES_ACCESS          D ON A.PARKING_ID      = D.ID
join     POLISHCASTLES_DIFFICULTY      E ON A.SEARCHING_ID    = E.ID
join     POLISHCASTLES_DIFFICULTY      F ON A.ACCESS_ID       = F.ID
join     POLISHCASTLES_RATING          G ON A.RATING_ID       = G.ID
where    latitude is not null
order by building, preservation_id DESC, Rating_id desc, access_id
;

-- ---------------------------------------------

INSERT INTO POLISHCASTLES_RATING (RATING, ICON, LEVEL)
SELECT  DISTINCT RATING, RATING_ICON, CAST(substr(RATING_ICON, 42, 1) AS INT)
FROM    landing.LANDING_CASTLE 
ORDER BY RATING_ICON;


INSERT INTO POLISHCASTLES_DIFFICULTY (LEVEL, DIFFICULTY, ACCESS_ICON, SEARCHING_ICON)
SELECT  DISTINCT CAST(substr(ACCESS_ICON, 43, 1) AS INT),
        ACCESS, ACCESS_ICON, 
        replace('http://www.polishcastles.eu/graphic/lupki1.gif', '1', substr(ACCESS_ICON,43,1) )
FROM    landing.LANDING_CASTLE
ORDER BY ACCESS_ICON;


INSERT INTO POLISHCASTLES_ACCESS (ACCESS, ADMISSION, PARKING, ADMISSION_ICON, PARKING_ICON)
SELECT  DISTINCT CASE WHEN ADMISSION = 'No entry' 
            THEN 'None' 
            ELSE substr(ADMISSION, 1, 4)
        END,
        ADMISSION, PARKING, ADMISSION_ICON, PARKING_ICON
FROM    landing.LANDING_CASTLE
WHERE   substr(ADMISSION, 1, 2) = substr(PARKING, 1, 2)
ORDER BY 2;


INSERT INTO POLISHCASTLES_PRESERVATION (PRESERVATION, ICON)
SELECT  DISTINCT PRESERVATION, PRESERVATION_ICON
FROM    landing.LANDING_CASTLE 
ORDER BY 2;


INSERT INTO POLISHCASTLES
select   A.ID
    ,    A.NAME
    ,    A.LINK
    ,    A.BUILDING
    ,    CAST(A.LATITUDE AS REAL)
    ,    CAST(A.LONGITUDE AS REAL)
    ,    B.ID
    ,    C.ID
    ,    D.ID
    ,    E.ID
    ,    F.ID
    ,    G.ID
    ,    A.PRESERVATION_DESC
    ,    A.ADMISSION_DESC
    ,    A.PARKING_DESC
    ,    A.SEARCHING_DESC
    ,    A.ACCESS_DESC
    ,    A.RATING_DESC
from    landing.LANDING_CASTLE        A
join    POLISHCASTLES_PRESERVATION    B ON A.PRESERVATION = B.PRESERVATION
join    POLISHCASTLES_ACCESS          C ON A.ADMISSION    = C.ADMISSION
join    POLISHCASTLES_ACCESS          D ON A.PARKING      = D.PARKING
join    POLISHCASTLES_DIFFICULTY      E ON A.SEARCHING    = E.DIFFICULTY
join    POLISHCASTLES_DIFFICULTY      F ON A.ACCESS       = F.DIFFICULTY
join    POLISHCASTLES_RATING          G ON A.RATING       = G.RATING 
;